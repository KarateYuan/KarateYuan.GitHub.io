<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Karate&#39;s Daily Blog</title>
  
  <subtitle>人生若只如初见</subtitle>
  <link href="https://karateyuan.github.io/atom.xml" rel="self"/>
  
  <link href="https://karateyuan.github.io/"/>
  <updated>2022-03-05T09:15:42.419Z</updated>
  <id>https://karateyuan.github.io/</id>
  
  <author>
    <name>Karate Yuan</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Kafka安装及使用</title>
    <link href="https://karateyuan.github.io/post/206593ae.html"/>
    <id>https://karateyuan.github.io/post/206593ae.html</id>
    <published>2022-03-05T06:38:28.000Z</published>
    <updated>2022-03-05T09:15:42.419Z</updated>
    
    <content type="html"><![CDATA[<ul><li><a href="#%E5%89%8D%E8%A8%80">前言</a></li><li><a href="#%E9%A2%84%E7%BD%AE%E7%8E%AF%E5%A2%83%E4%BB%A5%E5%8F%8A%E5%AE%89%E8%A3%85">预置环境以及安装</a><ul><li><a href="#%E5%AE%89%E8%A3%85java%E7%8E%AF%E5%A2%83">安装Java环境</a><ul><li><a href="#1-%E4%B8%8B%E8%BD%BDjdk">1. 下载jdk</a></li><li><a href="#2-%E9%85%8D%E7%BD%AE%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F">2. 配置环境变量</a></li><li><a href="#3-%E6%A3%80%E6%9F%A5%E6%98%AF%E5%90%A6%E5%AE%89%E8%A3%85%E6%88%90%E5%8A%9F">3. 检查是否安装成功</a></li></ul></li><li><a href="#%E5%AE%89%E8%A3%85zookeeper">安装zookeeper</a></li><li><a href="#%E5%AE%89%E8%A3%85kafka">安装kafka</a></li></ul></li><li><a href="#%E4%BD%BF%E7%94%A8%E5%91%BD%E4%BB%A4%E8%A1%8C%E6%93%8D%E4%BD%9Ckafka">使用命令行操作kafka</a><ul><li><a href="#%E5%88%9B%E5%BB%BA%E4%B8%80%E4%B8%AAtopic">创建一个topic</a></li><li><a href="#%E5%90%91%E4%B8%80%E4%B8%AAtopic%E4%B8%AD%E5%86%99%E6%B6%88%E6%81%AF">向一个topic中写消息</a></li><li><a href="#%E4%BB%8E%E4%B8%80%E4%B8%AAtopic%E4%B8%AD%E8%AF%BB%E5%8F%96%E6%B6%88%E6%81%AF">从一个topic中读取消息</a></li></ul></li><li><a href="#%E7%BB%93%E8%AF%AD">结语</a></li></ul><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>今天开始学习Kafka的相关知识，本篇文章主要记录在Linux环境下Kafka的安装以及采用Go语言编写相关的Demo。</p><h1 id="预置环境以及安装"><a href="#预置环境以及安装" class="headerlink" title="预置环境以及安装"></a>预置环境以及安装</h1><h2 id="安装Java环境"><a href="#安装Java环境" class="headerlink" title="安装Java环境"></a>安装Java环境</h2><h3 id="1-下载jdk"><a href="#1-下载jdk" class="headerlink" title="1. 下载jdk"></a>1. 下载jdk</h3><p>安装jdk可以在Oracle官网中注册用户并且下载，但是这种方式比较麻烦。本文推荐采用国内镜像的方式下载，这里给出一个jdk8的下载链接，读者可以自行下载，速度非常快。<br><a href="https://repo.huaweicloud.com/java/jdk/8u202-b08/jdk-8u202-linux-x64.tar.gz">https://repo.huaweicloud.com/java/jdk/8u202-b08/jdk-8u202-linux-x64.tar.gz</a></p><h3 id="2-配置环境变量"><a href="#2-配置环境变量" class="headerlink" title="2. 配置环境变量"></a>2. 配置环境变量</h3><p>首先采用<code>wget</code>命令下载该文件，对下载好的文件进行解压缩，执行</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ wget https://repo.huaweicloud.com/java/jdk/8u202-b08/jdk-8u202-linux-x64.tar.gz</span><br><span class="line">$ tar -zxvf jdk-8u202-linux-x64.tar.gz</span><br></pre></td></tr></table></figure><p>可以得到jdk所在文件夹，然后配置环境变量，使用vim打开<code>/etc/profile</code>文件，在其末尾添加如下信息，保存退出后，执行<code>source /etc/profile</code>即可。(ps:注意这里可能需要sudo权限)。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">export JAVA_HOME=/home/yuan/jdk1.8.0_202/</span><br><span class="line">export PATH=$JAVA_HOME/bin:$JAVA_HOME/jre/bin:$PATH</span><br><span class="line">export CLASSPATH=.:$JAVA_HOME/lib/dt.jar:$JAVA_HOME/lib/tools.jar</span><br></pre></td></tr></table></figure><h3 id="3-检查是否安装成功"><a href="#3-检查是否安装成功" class="headerlink" title="3. 检查是否安装成功"></a>3. 检查是否安装成功</h3><p>我们执行完上述两个步骤之后，需要检查下我们是否正确安装成功。我们打开一个shell,执行<code>java -version</code>命令，如果正确打印版本信息，则表明安装成功。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ java -version</span><br><span class="line">java version &quot;1.8.0_202&quot;</span><br><span class="line">Java(TM) SE Runtime Environment (build 1.8.0_202-b08)</span><br><span class="line">Java HotSpot(TM) 64-Bit Server VM (build 25.202-b08, mixed mode)</span><br></pre></td></tr></table></figure><h2 id="安装zookeeper"><a href="#安装zookeeper" class="headerlink" title="安装zookeeper"></a>安装zookeeper</h2><p>由于kafka采用zookeeper作为其分布式协调服务，因此需要首先安装zookeeper。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ wget https://dlcdn.apache.org/zookeeper/zookeeper-3.7.0/apache-zookeeper-3.7.0-bin.tar.gz</span><br><span class="line">$ tar -zxvf apache-zookeeper-3.7.0-bin.tar.gz</span><br></pre></td></tr></table></figure><p>下载后进入zookeeper的解压目录：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ cd conf/</span><br><span class="line">$ cp zoo_sample.cfg zoo.cfg</span><br><span class="line">$ cd ../bin/</span><br><span class="line">$ bash zkServer.sh start</span><br></pre></td></tr></table></figure><p>显示:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ jps</span><br><span class="line">ZooKeeper JMX enabled by default</span><br><span class="line">Using config: /home/yuan/apache-zookeeper-3.7.0-bin/bin/../conf/zoo.cfg</span><br><span class="line">Starting zookeeper ... STARTED</span><br></pre></td></tr></table></figure><p>表明zookeeper启动成功。执行<code>jps</code>命令查看java进程：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">1186 Jps</span><br><span class="line">1116 QuorumPeerMain</span><br></pre></td></tr></table></figure><p>其中QuorumPeerMain代表的就是zookeeper进程。表明zookeeper安装成功。这里我们先执行<code>bash zkServer.sh stop</code>停止进程，后续采用kafka的启动脚本启动zookeeper。</p><h2 id="安装kafka"><a href="#安装kafka" class="headerlink" title="安装kafka"></a>安装kafka</h2><p>和zookeeper一样，下载并解压文件：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ wget https://dlcdn.apache.org/kafka/3.1.0/kafka_2.13-3.1.0.tgz</span><br><span class="line">$ tar -xzf kafka_2.13-3.1.0.tgz</span><br><span class="line">$ cd kafka_2.13-3.1.0</span><br></pre></td></tr></table></figure><p>然后运行启动zookeeper和kafka。首先启动zookeeper，这种启动方式不是在后台运行的，我们先这样启动，后续考虑采用nohup后台运行。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ bin/zookeeper-server-start.sh config/zookeeper.properties</span><br></pre></td></tr></table></figure><p>然后打开一个新的shell，执行如下命令：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ bin/kafka-server-start.sh config/server.properties</span><br></pre></td></tr></table></figure><p>同样，这种启动方式kafka也不是在后台运行的。我们新打开一个shell，运行<code>jps</code>：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ jps</span><br><span class="line">1283 QuorumPeerMain</span><br><span class="line">1684 Kafka</span><br><span class="line">2139 Jps  </span><br></pre></td></tr></table></figure><p>可以看到zookeeper和kafka均正常启动啦。</p><h1 id="使用命令行操作kafka"><a href="#使用命令行操作kafka" class="headerlink" title="使用命令行操作kafka"></a>使用命令行操作kafka</h1><p>zookeeper和kafka均正常启动后，我们可以采用kafka自带的脚本来操作kafka。</p><h2 id="创建一个topic"><a href="#创建一个topic" class="headerlink" title="创建一个topic"></a>创建一个topic</h2><p>采用如下脚本可以创建一个topic：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ bin/kafka-topics.sh --create --topic quickstart-events --bootstrap-server localhost:9092</span><br></pre></td></tr></table></figure><p>如何查看该topic的一些描述信息呢？可以用以下的脚本：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ bin/kafka-topics.sh --describe --topic quickstart-events --bootstrap-server localhost:9092</span><br><span class="line">Topic: quickstart-events        TopicId: 5HF6NrvOSxCMsQJdn5MbQQ PartitionCount: 1       ReplicationFactor: 1</span><br><span class="line">Configs: segment.bytes=1073741824</span><br><span class="line">        Topic: quickstart-events        Partition: 0    Leader: 0       Replicas: 0     Isr: 0</span><br></pre></td></tr></table></figure><h2 id="向一个topic中写消息"><a href="#向一个topic中写消息" class="headerlink" title="向一个topic中写消息"></a>向一个topic中写消息</h2><p>采用如下脚本可以向一个topic中写消息：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ bin/kafka-console-producer.sh --topic quickstart-events --bootstrap-server localhost:9092</span><br><span class="line">This is my first event</span><br><span class="line">This is my second event</span><br></pre></td></tr></table></figure><p>可以随时采用<code>CTRL-C</code>退出。</p><h2 id="从一个topic中读取消息"><a href="#从一个topic中读取消息" class="headerlink" title="从一个topic中读取消息"></a>从一个topic中读取消息</h2><p>采用如下脚本可以从一个topic中读取消息：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$  bin/kafka-console-consumer.sh --topic quickstart-events --from-beginning --bootstrap-server localhost:9092 </span><br><span class="line">This is my first event</span><br><span class="line">This is my second event  </span><br></pre></td></tr></table></figure><p>可以随时采用<code>CTRL-C</code>退出。</p><h1 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h1><p>本文旨在初次体验Kafka，主要是从环境的配置以及基本命令行脚本的使用来体验kafka的使用特点。后续会从kafka的一些API以及架构特点进行详细探讨。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#%E5%89%8D%E8%A8%80&quot;&gt;前言&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#%E9%A2%84%E7%BD%AE%E7%8E%AF%E5%A2%83%E4%BB%A5%E5%8F%8A%E5%AE%89%E8%A3%85&quot;&gt;预</summary>
      
    
    
    
    <category term="后端技术" scheme="https://karateyuan.github.io/categories/%E5%90%8E%E7%AB%AF%E6%8A%80%E6%9C%AF/"/>
    
    
    <category term="技术成长" scheme="https://karateyuan.github.io/tags/%E6%8A%80%E6%9C%AF%E6%88%90%E9%95%BF/"/>
    
  </entry>
  
  <entry>
    <title>开篇语</title>
    <link href="https://karateyuan.github.io/post/ca8bfdf3.html"/>
    <id>https://karateyuan.github.io/post/ca8bfdf3.html</id>
    <published>2022-02-27T08:13:59.000Z</published>
    <updated>2022-03-04T14:26:48.957Z</updated>
    
    <content type="html"><![CDATA[<h1 id="开篇语"><a href="#开篇语" class="headerlink" title="开篇语"></a>开篇语</h1><p>本博客旨在为了记录生活中的点滴以及技术上的成长，希望自己能够一直坚持下去。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;开篇语&quot;&gt;&lt;a href=&quot;#开篇语&quot; class=&quot;headerlink&quot; title=&quot;开篇语&quot;&gt;&lt;/a&gt;开篇语&lt;/h1&gt;&lt;p&gt;本博客旨在为了记录生活中的点滴以及技术上的成长，希望自己能够一直坚持下去。&lt;/p&gt;
</summary>
      
    
    
    
    <category term="日常感悟" scheme="https://karateyuan.github.io/categories/%E6%97%A5%E5%B8%B8%E6%84%9F%E6%82%9F/"/>
    
    
    <category term="日常感悟" scheme="https://karateyuan.github.io/tags/%E6%97%A5%E5%B8%B8%E6%84%9F%E6%82%9F/"/>
    
  </entry>
  
</feed>
